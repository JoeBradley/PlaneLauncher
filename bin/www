#!/usr/bin/env node

/**
 * Module dependencies.
 */
var cfg = require('../env');
var app = require('../app');
var debug = require('debug')('planelauncher:server');
var http = require('http');
var piController = require('../PiController');

/**
 * Create HTTP server. List on Port 80
 */
var server = http.createServer(app);
server.listen(cfg.port);
server.on('error', onError);
server.on('listening', () => console.log("HTTP server listening on port " + cfg.port));

let httpsServer = null;

// In production, use SSL and HTTPS server
if (cfg.useSSL) {
  var fs = require('fs');
  var https = require('https');

  var privateKey = fs.readFileSync('/etc/letsencrypt/live/planelauncher.hopto.org/privkey.pem', 'utf8');
  var certificate = fs.readFileSync('/etc/letsencrypt/live/planelauncher.hopto.org/cert.pem', 'utf8');
  var ca = fs.readFileSync('/etc/letsencrypt/live/planelauncher.hopto.org/fullchain.pem', 'utf8');
  
  var credentials = { key: privateKey, cert: certificate, ca };

  /**
   * Create HTTPS servre.  Listen on port 443
   */
  httpsServer = https.createServer(credentials, app);
  httpsServer.listen(cfg.httpsPort);
  httpsServer.on('error', onError);
  httpsServer.on('listening', () => console.log("HTTPS server listening on port " + cfg.httpsPort));
}

// Socket IO (using HTTPS server in production, or HTTP)
var socket = require('socket.io')(cfg.useSSL ? httpsServer : server);

//Msg handler 
var msgHandler = require('../MessageHandler')(socket);
msgHandler.connect();

// Launch Controller
var cntrl = require('../LaunchController')(socket, piController);
cntrl.connect();

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
