#!/usr/bin/env node

console.log('Environment: ' + process.env.NODE_ENV);

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('planelauncher:server');
var fs = require('fs');
var http = require('http');
var https = require('https');
const piController = require('../PiController');

// Setup SSL
var privateKey = fs.readFileSync('/etc/letsencrypt/live/planelauncher.hopto.org/privkey.pem', 'utf8');
var certificate = fs.readFileSync('/etc/letsencrypt/live/planelauncher.hopto.org/cert.pem', 'utf8');
var ca = fs.readFileSync('/etc/letsencrypt/live/planelauncher.hopto.org/fullchain.pem', 'utf8');
var credentials = { key: privateKey, cert: certificate, ca: ca };

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
var httpsPort = port === 80 ? 443 : (port + 443);

/**
 * Create HTTP server. List on Port 80
 */
var server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', () =>  console.log("HTTP server listening on port " + port));

/**
 * Create HTTPS servre.  Listen on port 443
 */
var httpsServer = https.createServer(credentials, app);
httpsServer.listen(httpsPort);
httpsServer.on('error', onError);
httpsServer.on('listening', () =>  console.log("HTTPS server listening on port " + httpsPort));

// Socket IO
var socket = require('socket.io')(httpsServer);

//Msg handler 
var msgHandler = require('../MessageHandler')(socket);
msgHandler.connect();

// Launch Controller
var cntrl = require('../LaunchController')(socket, piController);
cntrl.connect();

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Listening on ' + bind);
}